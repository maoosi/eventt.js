{"version":3,"file":"eventt.js","sources":["../src/eventt.js"],"sourcesContent":["export default class Eventt {\n\n    /**\n        --- CORE ---\n    **/\n\n    constructor (options = {}) {\n    // instance constructor\n        this.options = {\n            debug: options.debug || false\n        }\n\n        this.debug = this.options.debug\n        this.events = []\n\n        return this\n    }\n\n    /**\n        --- API ---\n    **/\n\n    listen (type, selector, func, opts = false) {\n    // add events listeners\n        if (type !== undefined && selector !== undefined && typeof func === 'function') {\n            let types = this._toArray(type)\n            let selectors = this._toArray(selector)\n\n            selectors.forEach((_selector) => {\n                let targets = document.querySelectorAll(_selector)\n\n                targets.forEach((_target) => {\n                    types.forEach((_type) => {\n\n                        this._addEvent({\n                            targetElem: _target,\n                            eventType: _type,\n                            func: func,\n                            opts: opts\n                        })\n\n                    })\n                })\n            })\n        } else {\n            this._debug('error', 'Wrong parameters for the `listen()` method.')\n        }\n\n        return this\n    }\n\n    unlisten (type, selector) {\n    // remove events listeners\n        if (type !== undefined && selector !== undefined) {\n            let types = this._toArray(type)\n            let selectors = this._toArray(selector)\n\n            selectors.forEach((_selector) => {\n                let targets = document.querySelectorAll(_selector)\n\n                targets.forEach((_target) => {\n                    types.forEach((_type) => {\n\n                        this.events.forEach((_event, _index) => {\n                            let isTarget = _event.targetElem === _target || _target === '*'\n                            let isType = _event.eventType === _type || _type === '*'\n\n                            if (isTarget && isType) {\n                                this._removeEvent(_event, _index)\n                            }\n                        })\n\n                    })\n                })\n            })\n        } else {\n            this._debug('error', 'Wrong parameters for the `unlisten()` method.')\n        }\n\n        return this\n    }\n\n    trigger (type, selector) {\n    // trigger events listeners\n        if (type !== undefined && selector !== undefined) {\n            let types = this._toArray(type)\n            let selectors = this._toArray(selector)\n\n            selectors.forEach((_selector) => {\n                let targets = document.querySelectorAll(_selector)\n\n                targets.forEach((_target) => {\n                    types.forEach((_type) => {\n\n                        this.events.forEach((_event) => {\n                            let isTarget = _event.targetElem === _target || _target === '*'\n                            let isType = _event.eventType === _type || _type === '*'\n\n                            if (isTarget && isType) {\n                                this._triggerEvent(_event)\n                            }\n                        })\n\n                    })\n                })\n            })\n        } else {\n            this._debug('error', 'Wrong parameters for the `trigger()` method.')\n        }\n\n        return this\n    }\n\n    /**\n        --- FUNCTIONS ---\n    **/\n\n    _addEvent (event) {\n    // add event listener\n        this.events.push(event)\n        return event.targetElem.addEventListener(event.eventType, event.func, event.opts || false)\n    }\n\n    _removeEvent (event, index) {\n    // remove event listener\n        this.events.splice(index, 1)\n        return event.targetElem.removeEventListener(event.eventType, event.func, event.opts || false)\n    }\n\n    _triggerEvent (event) {\n    // trigger event\n        return event.func.call(this)\n    }\n\n    _toArray (data) {\n    // convert the data passed to an array\n        return typeof data === 'string' ? [data] : data\n    }\n\n    _debug (type, message) {\n    // log errors\n        if (this.debug) {\n            console.log('> Eventt.js | ' + type + ' :: ' + message + ' Please refer to the doc: `https://github.com/maoosi/eventt.js`')\n        }\n    }\n\n}\n"],"names":["Eventt","options","debug","this","events","type","selector","func","opts","undefined","types","_toArray","selectors","forEach","_selector","targets","document","querySelectorAll","_target","_type","_addEvent","_debug","_event","_index","isTarget","targetElem","isType","eventType","_removeEvent","_triggerEvent","event","push","addEventListener","index","splice","removeEventListener","call","data","message"],"mappings":"0gBAAqBA,6BAMJC,mFAEJA,eACMA,EAAQC,QAAS,QAGvBA,MAAQC,KAAKF,QAAQC,WACrBE,UAEED,8CAOHE,EAAMC,EAAUC,cAAMC,6DAEbC,SAATJ,GAAmCI,SAAbH,GAA0C,kBAATC,GAAqB,IACxEG,GAAQP,KAAKQ,SAASN,GACtBO,EAAYT,KAAKQ,SAASL,KAEpBO,QAAQ,SAACC,MACXC,GAAUC,SAASC,iBAAiBH,KAEhCD,QAAQ,SAACK,KACPL,QAAQ,SAACM,KAENC,sBACWF,YACDC,OACLZ,OACAC,oBAOjBa,OAAO,QAAS,qDAGlBlB,uCAGDE,EAAMC,iBAECG,SAATJ,GAAmCI,SAAbH,EAAwB,IAC1CI,GAAQP,KAAKQ,SAASN,GACtBO,EAAYT,KAAKQ,SAASL,KAEpBO,QAAQ,SAACC,MACXC,GAAUC,SAASC,iBAAiBH,KAEhCD,QAAQ,SAACK,KACPL,QAAQ,SAACM,KAENf,OAAOS,QAAQ,SAACS,EAAQC,MACrBC,GAAWF,EAAOG,aAAeP,GAAuB,MAAZA,EAC5CQ,EAASJ,EAAOK,YAAcR,GAAmB,MAAVA,CAEvCK,IAAYE,KACPE,aAAaN,EAAQC,qBAQzCF,OAAO,QAAS,uDAGlBlB,sCAGFE,EAAMC,iBAEEG,SAATJ,GAAmCI,SAAbH,EAAwB,IAC1CI,GAAQP,KAAKQ,SAASN,GACtBO,EAAYT,KAAKQ,SAASL,KAEpBO,QAAQ,SAACC,MACXC,GAAUC,SAASC,iBAAiBH,KAEhCD,QAAQ,SAACK,KACPL,QAAQ,SAACM,KAENf,OAAOS,QAAQ,SAACS,MACbE,GAAWF,EAAOG,aAAeP,GAAuB,MAAZA,EAC5CQ,EAASJ,EAAOK,YAAcR,GAAmB,MAAVA,CAEvCK,IAAYE,KACPG,cAAcP,qBAQlCD,OAAO,QAAS,sDAGlBlB,wCAOA2B,eAEF1B,OAAO2B,KAAKD,GACVA,EAAML,WAAWO,iBAAiBF,EAAMH,UAAWG,EAAMvB,KAAMuB,EAAMtB,OAAQ,wCAG1EsB,EAAOG,eAEZ7B,OAAO8B,OAAOD,EAAO,GACnBH,EAAML,WAAWU,oBAAoBL,EAAMH,UAAWG,EAAMvB,KAAMuB,EAAMtB,OAAQ,yCAG5EsB,SAEJA,GAAMvB,KAAK6B,KAAKjC,uCAGjBkC,SAEiB,gBAATA,IAAqBA,GAAQA,iCAGvChC,EAAMiC,GAENnC,KAAKD"}